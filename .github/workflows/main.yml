name: Auto Video Short

on:
  push:
    branches:
      - Production
  pull_request:
    branches:
      - Production
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Manual trigger
  

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AUDIO_NAME: "audio.mp3"
      VIDEO_NAME: "video.mp4"
      FINAL_VIDEO: "final_video.mp4"
      VIDEOURL: ${{ secrets.VIDEOURL }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        df -h
        sudo apt-get update
        sudo apt-get install -y imagemagick ghostscript
        python -m pip install --upgrade pip
        pip install oauth2client
        pip install git+https://github.com/suno-ai/bark.git 
        pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client
        pip install -r requirements.txt

    - name: Generate Audio
      run: |
        python -c "
        import os
        import warnings
        
        # Suppress specific FutureWarning
        warnings.filterwarnings('ignore', category=FutureWarning, module='bark.generation')
        
        from bark import SAMPLE_RATE, generate_audio, preload_models
        from scipy.io.wavfile import write
        
        # Download and load all models
        preload_models()
        
        # Generate audio from text
        text_prompt = 'Hello, my name is Suno. And, uh â€” and I like pizza. [laughs] But I also have other interests such as playing tic tac toe.'
        speech_array = generate_audio(text_prompt)
        
        # Ensure the output directory exists
        output_dir = 'output'
        os.makedirs(output_dir, exist_ok=True)
        
        # Save the generated audio to a file
        audio_file_path = os.path.join(output_dir, 'audio.wav')
        write(audio_file_path, SAMPLE_RATE, (speech_array * 32767).astype('int16'))
        
        print(f'Audio has been saved to {audio_file_path}')
        "

    - name: Commit output files
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add -f output/*
        git commit -m "Add generated audio files"
        git push origin Production  

    - name: Update ImageMagick policy
      run: |
        sudo sed -i 's/<policy domain="path" rights="none" pattern="@\*"/<!-- <policy domain="path" rights="none" pattern="@\*" -->/' /etc/ImageMagick-6/policy.xml || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="PS"/<!-- <policy domain="coder" rights="none" pattern="PS" -->/' /etc/ImageMagick-6/policy.xml || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="EPI"/<!-- <policy domain="coder" rights="none" pattern="EPI" -->/' /etc/ImageMagick-6/policy.xml || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="URL"/<!-- <policy domain="coder" rights="none" pattern="URL" -->/' /etc/ImageMagick-6/policy.xml || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="MVG"/<!-- <policy domain="coder" rights="none" pattern="MVG" -->/' /etc/ImageMagick-6/policy.xml || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="MSL"/<!-- <policy domain="coder" rights="none" pattern="MSL" -->/' /etc/ImageMagick-6/policy.xml || true

    - name: Run script
      run: python main.py

    - name: Commit output files
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add -f output/*
        git commit -m "Add generated video files"
        git push origin Production
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
