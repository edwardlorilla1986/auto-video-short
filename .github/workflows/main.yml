name: Auto Video Short

on:
  push:
    branches:
      - Production
  pull_request:
    branches:
      - Production
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AUDIO_NAME: "audio.mp3"
      VIDEO_NAME: "video.mp4"
      FINAL_VIDEO: "final_video.mp4"
      VIDEOURL: ${{ secrets.VIDEOURL }}
      AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        df -h
        sudo apt-get update
        curl -fsSL https://ollama.com/install.sh | sh
        sudo apt-get install ttf-mscorefonts-installer
        sudo apt-get install -y imagemagick ghostscript
        python -m pip install --upgrade pip
        pip install oauth2client
        pip install torch torchvision torchaudio
        pip install git+https://github.com/suno-ai/bark.git
        pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client
        pip install -r requirements.txt
        sudo apt-get install -y curl
        
        
    - name: Verify Ollama Installation
      run: ollama --version
    - name: Kill Process on Default Ollama Port (if any)
      run: |
        sudo kill $(sudo lsof -t -i:11434) || echo "No process running on port 11434"

    - name: Start Ollama Service
      run: |
        ollama serve &
        sleep 5  # Wait for the service to start

    - name: Check Ollama Root Endpoint
      run: |
        curl http://localhost:11434/

    - name: Generate Cat Fact Using Ollama (Debug)
      id: generate_cat_fact_v1
      run: |
        cat_fact=$(curl -X POST http://localhost:11434/v1/generate -d '{"prompt": "Give me an interesting fact about cats."}')
        echo "cat_fact=$cat_fact" >> $GITHUB_ENV

    - name: Generate Cat Fact Using Ollama
      id: generate_cat_fact  # Assign an ID to reference output later
      run: |
        cat_fact=$(curl -X POST http://localhost:11434/generate -d '{"prompt": "Give me an interesting fact about cats."}')
        echo "cat_fact=$cat_fact" >> $GITHUB_ENV

    - name: Update ImageMagick policy
      run: |
        if [ -f /etc/ImageMagick-7/policy.xml ]; then
          POLICY_FILE="/etc/ImageMagick-7/policy.xml"
        elif [ -f /etc/ImageMagick-6/policy.xml ]; then
          POLICY_FILE="/etc/ImageMagick-6/policy.xml"
        else
          echo "No ImageMagick policy.xml file found."
          exit 1
        fi
        sudo sed -i 's/<policy domain="path" rights="none" pattern="@\*"/<!-- <policy domain="path" rights="none" pattern="@\*" -->/' $POLICY_FILE || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="PS"/<!-- <policy domain="coder" rights="none" pattern="PS" -->/' $POLICY_FILE || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="EPI"/<!-- <policy domain="coder" rights="none" pattern="EPI" -->/' $POLICY_FILE || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="URL"/<!-- <policy domain="coder" rights="none" pattern="URL" -->/' $POLICY_FILE || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="MVG"/<!-- <policy domain="coder" rights="none" pattern="MVG" -->/' $POLICY_FILE || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="MSL"/<!-- <policy domain="coder" rights="none" pattern="MSL" -->/' $POLICY_FILE || true
        sudo sed -i 's/<policy domain="coder" rights="none" pattern="PDF"/<!-- <policy domain="coder" rights="none" pattern="PDF" -->/' $POLICY_FILE || true

    - name: Run script
      run: python main.py --prompt "${{ env.cat_fact }}" --max_tokens 100

    - name: Commit output files
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add -f output/*
        git commit -m "Add generated video files"
        git push origin Production
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
